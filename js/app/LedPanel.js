App.LedPanel = class LedPanel{
	//led描画情報
	led;
	//実際のデータ
	data;
	//ledのサイズ指定用
	display_x = 59;
	display_y = 7;
	//現在の表示位置
	current_x = 0;
	current_y = -8;
	//目標位置
	target_y = 0;
	//一行の高さ(ドット数)
	row_height = 8;
	//intervalを特定するために必要
	interval_id = null;
	//スクロール速度(ms)
	scroll_speed = 80;
	//表示データをjson形式で出力したもの
	jsonData = {"head_chunk_size":10,"data_type":0,"width":59,"height":39,"color_type":1,"data_chunk_size":288,"data":[[1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0],[1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0],[1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0],[1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0],[1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,1,0,0,0,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,1,0,0,0,1,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1],[1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,1],[1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1],[1,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1],[1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1],[1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1],[0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,0,0,1,0,0,0,1],[1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1],[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1],[0,1,1,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,1,0],[0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0],[1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0],[0,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0]]}

	constructor(targetId){
		//データセット
		this.data = this.jsonData;
		//高さ = ドットサイズ*ドット数 + ドット間のサイズ*(ドット数-1) + padding(ドットサイズの半分)*2
		//let height = (dotSize*this.display_y) + ((dotSize/5)*(this.display_y-1)) + dotSize;
		/*
		//基本は50pxになるようにする
		let defaultHeight = 50;
		//ドットサイズを計算
		let calcDotSize = defaultHeight / ((this.display_y * 1.2) + 0.8);
		*/
		//予め計算した値
		let defaultDotSize = 5.434782608695651;//ドットサイズ指定(調整用)
		let calcDotSize = defaultDotSize;
		//横幅を計算する
		let calcWidth = calcDotSize * ((this.display_x * 1.2) + 0.8);
		//let calcWidth = (calcDotSize*this.display_x) + ((calcDotSize/5)*(this.display_x-1)) + calcDotSize;
		//windowの横幅と比較する
		if(calcWidth > window.innerWidth){
			//横がはみ出す場合はドットサイズをwidthに合わせて修正する
			calcDotSize = (window.innerWidth - 10) / ((this.display_x * 1.2) + 0.8);
		}

		let dotSize = calcDotSize;
		
		this.led = new Wls.LED.MatrixLed(this.display_y, this.display_x, dotSize, dotSize / 5, dotSize / 2);
		//ledをセッティングする要素を取得してキャンバス要素を追加する。
		let target = document.getElementById(targetId);
		let led_outer = document.createElement('div');
		led_outer.classList.add('led_outer');
		let base = document.createElement('canvas');
		base.id = 'base';
		base.classList.add('ledPanel');
		let light = document.createElement('canvas');
		light.id = 'light';
		light.classList.add('ledPanel');
		led_outer.appendChild(base);
		led_outer.appendChild(light);
		target.appendChild(led_outer);
		//ledの描画セットアップを行う
		this.led.setupCanvas('base', 'light');
		//初期位置でデータセット
		this.writeBuffer();
	}
	writeBuffer(){
		for(let i = 0; i < this.led.row; i++){
			for(let j = 0; j < this.led.col; j++){
				if( i + this.current_y < 0 || i + this.current_y >= this.data.height ||
						j + this.current_x < 0 || j + this.current_x >= this.data.width){
					this.led.buffer[i][j] = 0;
				}
				else{
					this.led.buffer[i][j] = this.data.data[i + this.current_y][j + this.current_x];
				}
			}
		}
		this.led.refresh();
	}
	setScroll(index){
		this.target_y = index * this.row_height;
		this.startScroll();
	}
	startScroll(){
		if(this.interval_id > 0){
			return;
		}
		this.interval_id = setInterval(()=>{this.pollingTask()}, this.scroll_speed);
	}
	stopScroll(){
		clearInterval(this.interval_id);
		this.interval_id = null;
	}
	pollingTask(){
		if(this.current_y < this.target_y){
			this.current_y++;
			this.writeBuffer();
		}
		else if(this.current_y > this.target_y){
			this.current_y--;
			this.writeBuffer();
		}

		if(this.current_y == this.target_y){
			this.stopScroll();
		}
	}
	resize(){
		//予め計算した値
		let defaultDotSize = 5.434782608695651;//ドットサイズ指定(調整用)
		let calcDotSize = defaultDotSize;
		//横幅を計算する
		let calcWidth = calcDotSize * ((this.display_x * 1.2) + 0.8);
		//let calcWidth = (calcDotSize*this.display_x) + ((calcDotSize/5)*(this.display_x-1)) + calcDotSize;
		//windowの横幅と比較する
		if(calcWidth > (window.innerWidth - 10)){
			//横がはみ出す場合はドットサイズを修正する
			calcDotSize = (window.innerWidth - 10) / ((this.display_x * 1.2) + 0.8);
		}
		else{
			if(this.led.dotSize == defaultDotSize){
				return;
			}
		}

		this.led.dotSize = calcDotSize;
		this.led.gap = calcDotSize / 5;
		this.led.margin = calcDotSize / 2;
		this.led.reCalc();
		this.led.refresh();
	}
}

